openapi: 3.1.0

servers:
  - url: /api

info:
  title: Evently API
  version: 1.0.0

paths:
  /user/registration:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: User's username.
                email:
                  type: string
                  description: User's email.
                birthday:
                  type: date
                  description: User's birthday.
                password:
                  type: string
                  description: User's password meeting specific validation requirements.
      responses:
        '201':
          description: User registered successfully.
        '400':
          description: Bad request (e.g., invalid email format).

  /user/login:
    post:
      summary: Login a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: User's email as username.
                password:
                  type: string
                  description: User's password.
      responses:
        '200':
          description: Login successful.
        '400':
          description: Incorrect email or password.

  /user/logout:
    post:
      summary: Logout a user
      tags:
        - Authentication
      responses:
        '200':
          description: Logout successful.

  /user/google:
    get:
      summary: Google authentication
      tags:
        - Authentication
      responses:
        '200':
          description: Redirects to Google for authentication.

  /user/google/callback:
    get:
      summary: Google authentication callback
      tags:
        - Authentication
      responses:
        '200':
          description: Callback for Google authentication.

  /user/auth:
    get:
      summary: Check if user is authenticated
      tags:
        - Authentication
      security:
          - bearerAuth: []
      responses:
        '200':
          description: Returns user authentication status.

  /user/send-verification-email:
    post:
      summary: Send email verification to the user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: User's email for verification.
      responses:
        '200':
          description: Verification email was sent.
        '403':
          description: Email already verified.

  /user/verify-email:
    get:
      summary: Verify user email
      tags:
        - Authentication
      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: User's email address to be verified.
        - in: query
          name: token
          schema:
            type: string
          description: JWT token for email verification.
      responses:
        '200':
          description: Email verified successfully.
        '400':
          description: Invalid or expired token.

  /user/google/mobile:
    post:
      summary: Verify Google token from mobile
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Google ID token from the mobile app.
      responses:
        '200':
          description: Google token verified and user authenticated.
        '500':
          description: Internal error during token verification.

  /event:
    post:
      summary: Create a new event
      description: Creates a new event with the provided details. Photos can also be uploaded.
      tags:
        - Event
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Title of the event.
                description:
                  type: string
                  description: Description of the event (optional).
                startDate:
                  type: string
                  format: date-time
                  description: Start date and time of the event.
                endDate:
                  type: string
                  format: date-time
                  description: End date and time of the event.
                capacity:
                  type: integer
                  description: Maximum number of participants (optional).
                ageLimit:
                  type: integer
                  description: Age limit for participants (optional).
                isPublic:
                  type: boolean
                  required: false
                  description: Whether the event is public.
                location:
                  type: string
                  example: 'Central Park, near the lake'
                cityId:
                  type: integer
                  description: ID of the event's city.
                categoryId:
                  type: integer
                  description: ID of the event's category.
                formatId:
                  type: integer
                  description: ID of the event's format.
                photoDescriptions:
                  type: object
                  additionalProperties:
                    type: string
                  description: Descriptions for uploaded photos (optional).
                photos:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Photos to be uploaded for the event (optional).
      responses:
        201:
          description: Event created successfully with photos (if provided).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: ID of the newly created event.
                  title:
                    type: string
                    description: Title of the event.
                  description:
                    type: string
                    description: Description of the event.
                  startDate:
                    type: string
                    format: date-time
                    description: Start date and time of the event.
                  endDate:
                    type: string
                    format: date-time
                    description: End date and time of the event.
                  capacity:
                    type: integer
                    description: Maximum number of participants.
                  ageLimit:
                    type: integer
                    description: Age limit for participants.
                  isPublic:
                    type: boolean
                    description: Whether the event is public.
                  location:
                    type: string
                    description: Event location.
                  cityId:
                    type: integer
                    description: ID of the event's city.
                  categoryId:
                    type: integer
                    description: ID of the event's category.
                  formatId:
                    type: integer
                    description: ID of the event's format.
                  secretCode:
                    type: string
                    description: Secret code for the event.
                  organizerId:
                    type: integer
                    description: ID of the event's organizer.
                  photos:
                    type: array
                    items:
                      type: string
                      description: URI of the uploaded photos.
        400:
          description: Missing required fields or invalid input.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message.
        401:
          description: Unauthorized, user must be authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message.

    get:
      summary: Get all events
      description: Retrieve a list of events with optional filters.
      tags:
        - Event
      parameters:
        - in: query
          name: title
          description: Search events by title
          required: false
          schema:
            type: string
        - in: query
          name: location
          description: Search events by location
          required: false
          schema:
            type: string
        - in: query
          name: cityId
          description: Filter events by city ID
          required: false
          schema:
            type: integer
        - in: query
          name: categoryId
          description: Filter events by category ID
          required: false
          schema:
            type: integer
        - in: query
          name: formatId
          description: Filter events by format ID
          required: false
          schema:
            type: integer
        - in: query
          name: start
          description: Filter events starting after a specific date
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: end
          description: Filter events ending before a specific date
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: limit
          description: Number of events to return per page
          required: false
          schema:
            type: integer
            default: 10
        - in: query
          name: offset
          description: The page offset
          required: false
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: List of events
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventWithPhotos'
        500:
          description: Internal server error

  /event/{id}:
    get:
      summary: Get event by ID
      description: Retrieve details of a specific event by its ID.
      tags:
        - Event
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Event ID
      responses:
        200:
          description: Event found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventWithPhotos'
        400:
          description: Event not found
        500:
          description: Internal server error

    put:
      summary: Update an existing event
      description: Update the details of an existing event, including photos.
      tags:
        - Event
      security:
        - BearerAuth: []
      requestBody:
        required: true
        name: event
        description: Updated event details
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
                capacity:
                  type: integer
                ageLimit:
                  type: integer
                isPublic:
                  type: boolean
                location:
                  type: string
                cityId:
                  type: integer
                categoryId:
                  type: integer
                formatId:
                  type: integer
                photoDescriptions:
                  type: object
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Event ID
              
      responses:
        200:
          description: Event updated successfully
        400:
          description: Event not found or missing required fields
        403:
          description: Forbidden (not authorized to update event)
        500:
          description: Internal server error

    delete:
      summary: Delete an event
      description: Delete a specific event by its ID.
      tags:
        - Event
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Event ID
      responses:
        200:
          description: Event deleted successfully
        400:
          description: Event not found
        403:
          description: Forbidden (not authorized to delete event)
        500:
          description: Internal server error

  /event/{id}/register:
    post:
      summary: Register for an event
      description: Allows a user to register for an event if it has not reached its capacity.
      tags:
        - Event
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          description: ID of the event to register for
          schema:
            type: string
      responses:
        200:
          description: Successfully registered for the event
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  registration:
                    type: object
                    properties:
                      id:
                        type: string
                      userId:
                        type: string
                      eventId:
                        type: string
        '400':
          description: User already registered or event is at full capacity
        '404':
          description: Event not found
        '500':
          description: Internal server error

  /event/{id}/unregister:
    delete:
      summary: Unregister from an event
      description: Allows a user to unregister from an event if they are already registered.
      tags:
        - Event
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          description: ID of the event to unregister from
          schema:
            type: string
      responses:
        '200':
          description: Successfully unregistered from the event
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: User not registered for the event
        '404':
          description: Event not found
        '500':
          description: Internal server error

  /country:
    get:
      summary: Get all countries
      description: Retrieve a list of all countries.
      tags:
        - Country
      responses:
        200:
          description: List of countries retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CountryWithCities'
        500:
          description: Internal server error.
    post:
      summary: Create a new country
      description: Create a new country. Only admins are allowed.
      tags:
        - Country
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "United States"
      responses:
        201:
          description: Country created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
        400:
          description: Bad request (e.g., missing required fields).
        500:
          description: Internal server error.

  /country/{id}:
    get:
      summary: Get a country by ID
      description: Retrieve a country by its ID, including associated cities.
      tags:
        - Country
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the country.
          schema:
            type: integer
      responses:
        200:
          description: Country retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryWithCities'
        400:
          description: Country not found.
        500:
          description: Internal server error.
    put:
      summary: Update a country
      description: Update the name of an existing country. Only admins are allowed.
      tags:
        - Country
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the country.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Canada"
      responses:
        200:
          description: Country updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
        400:
          description: Country not found or bad request.
        500:
          description: Internal server error.
    delete:
      summary: Delete a country
      description: Delete a country by its ID. Only admins are allowed.
      tags:
        - Country
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the country.
          schema:
            type: integer
      responses:
        200:
          description: Country deleted successfully.
        400:
          description: Country not found.
        500:
          description: Internal server error.

  /city:
    post:
      summary: Create a new city
      tags:
        - City
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'New York'
                countryId:
                  type: integer
                  example: 1
              required:
                - name
                - countryId
      responses:
        '201':
          description: City created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

    get:
      summary: Get all cities
      tags:
        - City
      responses:
        '200':
          description: List of cities retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
        '500':
          description: Internal Server Error

  /city/{id}:
    get:
      summary: Get a city by ID
      tags:
        - City
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: City retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
        '400':
          description: Bad Request - City not found
        '500':
          description: Internal Server Error

    put:
      summary: Update a city
      tags:
        - City
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Los Angeles'
                countryId:
                  type: integer
                  example: 2
      responses:
        '200':
          description: City updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
        '400':
          description: Bad Request - City or Country not found
        '500':
          description: Internal Server Error

    delete:
      summary: Delete a city
      tags:
        - City
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: City deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'City deleted successfully'
        '400':
          description: Bad Request - City not found
        '500':
          description: Internal Server Error

  /location:
    post:
      summary: Create a new location
      tags:
        - Location
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                details:
                  type: string
                  description: Details about the location
                cityId:
                  type: integer
                  description: ID of the city the location belongs to
              required:
                - cityId
      responses:
        201:
          description: Location created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        400:
          description: Bad request, possibly due to missing required fields
        500:
          description: Internal server error
    get:
      summary: Retrieve all locations
      tags:
        - Location
      responses:
        200:
          description: A list of locations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        500:
          description: Internal server error

  /location/{id}:
    get:
      summary: Retrieve a location by ID
      tags:
        - Location
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the location to retrieve
      responses:
        200:
          description: Location retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        400:
          description: Location not found
        500:
          description: Internal server error
    put:
      summary: Update a location by ID
      tags:
        - Location
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the location to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                details:
                  type: string
                  description: Details about the location
                cityId:
                  type: integer
                  description: ID of the city the location belongs to
      responses:
        200:
          description: Location updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        400:
          description: Location not found
        500:
          description: Internal server error
    delete:
      summary: Delete a location by ID
      tags:
        - Location
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the location to delete
      responses:
        200:
          description: Location deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Location deleted successfully"
        400:
          description: Location not found
        500:
          description: Internal server error
    
  /format:
    post:
      summary: Create a new format
      tags:
        - Format
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Title of the format
                description:
                  type: string
                  description: Description of the format
              required:
                - title
                - description
      responses:
        201:
          description: Format created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Format'
        400:
          description: Bad request, possibly due to missing required fields
        500:
          description: Internal server error
    get:
      summary: Retrieve all formats
      tags:
        - Format
      responses:
        200:
          description: A list of formats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Format'
        500:
          description: Internal server error

  /format/{id}:
    get:
      summary: Retrieve a format by ID
      tags:
        - Format
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the format to retrieve
      responses:
        200:
          description: Format retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Format'
        400:
          description: Format not found
        500:
          description: Internal server error
    put:
      summary: Update a format by ID
      tags:
        - Format
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the format to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Updated title of the format
                description:
                  type: string
                  description: Updated description of the format
      responses:
        200:
          description: Format updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Format'
        400:
          description: Format not found
        500:
          description: Internal server error
    delete:
      summary: Delete a format by ID
      tags:
        - Format
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the format to delete
      responses:
        200:
          description: Format deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Format deleted successfully"
        400:
          description: Format not found
        500:
          description: Internal server error

  /category:
    post:
      summary: Create a new category
      tags:
        - Category
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Title of the category
                description:
                  type: string
                  description: Description of the category
              required:
                - title
                - description
      responses:
        201:
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Bad request, possibly due to missing required fields
        500:
          description: Internal server error
    get:
      summary: Retrieve all categories
      tags:
        - Category
      responses:
        200:
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        500:
          description: Internal server error

  /category/{id}:
    get:
      summary: Retrieve a category by ID
      tags:
        - Category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the category to retrieve
      responses:
        200:
          description: Category retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Category not found
        500:
          description: Internal server error
    put:
      summary: Update a category by ID
      tags:
        - Category
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the category to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Updated title of the category
                description:
                  type: string
                  description: Updated description of the category
      responses:
        200:
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Category not found
        500:
          description: Internal server error
    delete:
      summary: Delete a category by ID
      tags:
        - Category
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the category to delete
      responses:
        200:
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Category deleted successfully"
        400:
          description: Category not found
        500:
          description: Internal server error

  /chat:
    post:
      summary: Create a chat room for an event
      description: Creates a chat room for a specified event, but only if the user is the organizer of the event.
      tags:
        - ChatRoom
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventId:
                  type: integer
                  example: 42
      responses:
        201:
          description: Chat room created successfully
          content:
            application/json:
              schema:
                type: string
                example: "Chat was created successfully!"
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Event not found
        500:
          description: Internal server error

  /chat/{id}:
    delete:
      summary: Delete the chat room
      description: Deletes a chat room for a specified event, but only if the user is the organizer of the event.
      tags:
        - ChatRoom
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the chat room
      responses:
        200:
          description: Chat room deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Chat room deleted successfully!"
        403:
          description: Forbidden request
        404:
          description: Chat room or event not found
        500:
          description: Internal server error

  /chat/id:
    get:
      summary: Get chat room ID for an event
      description: Returns the ID of the chat room associated with a specified event.
      tags:
        - ChatRoom
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: eventId
          schema:
            type: integer
          required: true
          description: ID of the event
      responses:
        200:
          description: Chat room found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: '#/components/schemas/ChatRoom'
        404:
          description: Chat room not found for the event

        500:
          description: Internal server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 101
        username:
          type: string
          example: 'johndoe'
        email:
          type: string
          example: 'johndoe@example.com'
        password:
          type: string
          example: 'password123'
        emailVerified:
          type: boolean
          example: false
          default: false
        birthday:
          type: string
          format: date
          example: '1990-01-01'
        roleId:
          type: integer
          example: 1

    Event:
      type: object
      properties:
        id:
          type: integer
          example: 101
        title:
          type: string
          example: 'Tech Conference 2024'
        description:
          type: string
          example: 'A conference about the latest in tech.'
        startDate:
          type: string
          format: date-time
          example: '2024-07-20T09:00:00Z'
        endDate:
          type: string
          format: date-time
          example: '2024-07-20T17:00:00Z'
        capacity:
          type: integer
          example: 200
        participantAmount:
          type: integer
          example: 20
        ageLimit:
          type: integer
          example: 18
        isPublic:
          type: boolean
          example: true
        secretCode:
          type: string
          example: 'CONF2024'
        organizerId:
          type: integer
          example: 1
        
        categoryId:
          type: integer
          example: 3
        formatId:
          type: integer
          example: 4

    EventWithPhotos:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          properties:
            photos:
              type: array
              items:
                $ref: '#/components/schemas/Photo'

    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: 'Music'
        description:
          type: string
          example: 'Events related to music and concerts.'

    City:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'New York'
        countryId:
          type: integer
          example: 1

    Country:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'United States'

    CountryWithCities:
      allOf:
        - $ref: '#/components/schemas/Country'
        - type: object
          properties:
            cities:
              type: array
              items:
                $ref: '#/components/schemas/City'

    Format:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: 'Workshop'
        description:
          type: string
          example: 'Hands-on training sessions.'

    Photo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        uri:
          type: string
          example: '../path/photo.jpg'
        description:
          type: string
          example: 'Event banner image'
        eventId:
          type: integer
          example: 101

    Role:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'admin'

    EventRegistration:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 2
        eventId:
          type: integer
          example: 3
    
    ChatRoom:
      type: object
      properties:
        id:
          type: integer
          example: 1
        eventId:
          type: integer
          example: 42

    ChatMessage:
      type: object
      properties:
        id:
          type: integer
          example: 101
        userId:
          type: integer
          example: 5
        chatRoomId:
          type: integer
          example: 1
        message:
          type: string
          example: "This is a chat message"
        createdAt:
          type: string
          format: date-time
          example: "2024-12-04T10:00:00Z"