openapi: 3.1.0

info:
  title: Your API Title
  version: 1.0.0

tags:
  - name: Events
    description: Operations related to events
  - name: Authentication
    description: Operations related to user authentication

paths:
  /user/registration:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: User's email as username.
                password:
                  type: string
                  description: User's password meeting specific validation requirements.
      responses:
        '201':
          description: User registered successfully.
        '400':
          description: Bad request (e.g., invalid email format).

  /user/login:
    post:
      summary: Login a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: User's email as username.
                password:
                  type: string
                  description: User's password.
      responses:
        '200':
          description: Login successful.
        '400':
          description: Incorrect email or password.

  /user/logout:
    post:
      summary: Logout a user
      tags:
        - Authentication
      responses:
        '200':
          description: Logout successful.

  /user/google:
    get:
      summary: Google authentication
      tags:
        - Authentication
      responses:
        '200':
          description: Redirects to Google for authentication.

  /user/google/callback:
    get:
      summary: Google authentication callback
      tags:
        - Authentication
      responses:
        '200':
          description: Callback for Google authentication.

  /user/auth:
    get:
      summary: Check if user is authenticated
      tags:
        - Authentication
      security:
          - bearerAuth: []
      responses:
        '200':
          description: Returns user authentication status.

  /user/send-verification-email:
    post:
      summary: Send email verification to the user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: User's email for verification.
      responses:
        '200':
          description: Verification email was sent.
        '403':
          description: Email already verified.

  /user/verify-email:
    get:
      summary: Verify user email
      tags:
        - Authentication
      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: User's email address to be verified.
        - in: query
          name: token
          schema:
            type: string
          description: JWT token for email verification.
      responses:
        '200':
          description: Email verified successfully.
        '400':
          description: Invalid or expired token.

  /user/google/mobile:
    post:
      summary: Verify Google token from mobile
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Google ID token from the mobile app.
      responses:
        '200':
          description: Google token verified and user authenticated.
        '500':
          description: Internal error during token verification.

  /events:
    post:
      summary: Create a new event
      tags:
        - Events
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                location:
                  type: string
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
                capacity:
                  type: integer
                category:
                  type: string
                price:
                  type: number
                  format: float
                status:
                  type: string
                  enum: [scheduled, ongoing, completed, cancelled]
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "201":
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        "400":
          description: Bad request

    get:
      summary: Get a list of events
      tags:
        - Events
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Name of the event
        - in: query
          name: location
          schema:
            type: string
          description: Location of the event
        - in: query
          name: category
          schema:
            type: string
          description: Category of the event
        - in: query
          name: start
          schema:
            type: string
            format: date
            description: Start date filter
        - in: query
          name: end
          schema:
            type: string
            format: date
            description: End date filter
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Limit number of events
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Offset for pagination
      responses:
        "200":
          description: List of events
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
        "500":
          description: Internal server error

  /events/{id}:
    get:
      summary: Get an event by ID
      tags:
        - Events
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the event to retrieve
      responses:
        "200":
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        "400":
          description: Bad request
        "404":
          description: Event not found

    put:
        summary: Update an event
        tags:
          - Events
        security:
          - bearerAuth: []
        parameters:
          - name: id
            in: path
            required: true
            description: ID of the event
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  description:
                    type: string
                  location:
                    type: string
                  startDate:
                    type: string
                    format: date-time
                  endDate:
                    type: string
                    format: date-time
                  capacity:
                    type: integer
                  category:
                    type: string
                  price:
                    type: number
                    format: float
                  status:
                    type: string
                    enum:
                      - scheduled
                      - ongoing
                      - completed
                      - cancelled
        responses:
          "200":
            description: Event updated successfully
            content:
              application/json:
                schema:
                  type: string
                  example: 'Event was updated successfully'

    delete:
      summary: Delete an event
      tags:
        - Events
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the event
          schema:
            type: integer
      responses:
        "200":
          description: Event deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Event was deleted successfully!'
        "404":
          description: Event not found

components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          example: 'johndoe@example.com'
        password:
          type: string
          example: 'password123'
        emailVerified:
          type: boolean
          example: false

    Event:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        location:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        capacity:
          type: integer
        category:
          type: string
        price:
          type: number
          format: float
        status:
          type: string
          enum: [scheduled, ongoing, completed, cancelled]
        imageUrls:
          type: array
          items:
            type: string